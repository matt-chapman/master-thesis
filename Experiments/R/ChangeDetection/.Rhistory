PlotResults(data1melted, 'x')
PlotResults(data1melted, 'Points Appended to Tail')
PlotResults(data2melted, 'x')
PlotResults(data1melted, 'Points Appended to Tail')
PlotResults(data2melted, paste('Relative CP & TP Location'))
PlotResults(data2melted, paste('CP & TP Position'))
PlotResults(data2melted, 'CP Position')
PlotResults(data3melted, 'CP Position')
PlotResults(data4melted, 'Points Appended to Head')
PlotResults(data5melted, 'False Positives')
PlotResults(data6melted, 'False Negatives')
PlotResults(data7melted, 'False Negatives')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/simulated.R')
data7 <- Experiment7()
data7melted <- melt(data7, id = 'Distance')
PlotResults(data7melted)
PlotResults(data7melted,'x')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/simulated.R')
data7 <- Experiment7()
data7melted <- melt(data7, id = 'Distance')
PlotResults(data7melted,'x')
PlotResults(data7melted,'Number of True & Computed Change Points')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/simulated.R')
data8 <- Experiment8()
data8melted <- melt(data8, id = 'Distance')
PlotResults(data8melted, 'x')
PlotResults(data8melted, 'Number of True & Computed Change Points')
RunExperiment('rabobank')
View(data3)
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/measures.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/simulated.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/simulated.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/measures.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/measures.R')
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
RunExperiment('rabobank')
library(ggplot2)
qqplot(meanvar.pelt@data.set)
meanvar.pelt@data.set
test <- as.data.frame(meanvar.pelt@data.set)
qqplot(test)
test
qqplot(test[['x']])
test[['x']]
ggplot(test, aes(x= x))
ggplot(test, aes(y = x))
ggplot(test, aes(y = x, x = 1:59))
ggplot(melt(data.frame(time=as.numeric(time(var.pelt@data.set)), var.pelt@data.set), id.vars="time"), aes(time, value)) +
geom_line() +
geom_vline(xintercept = cpts.ts(var.pelt), colour="red", linetype = "dotdash")
ggplot(melt(data.frame(time=as.numeric(time(var.pelt@data.set)), var.pelt@data.set), id.vars="time"), aes(time, value)) +
geom_line() +
geom_vline(xintercept = cpts.ts(var.pelt), colour="red", linetype = "dotdash") +
geom_vline(xintercept = groundtruth.indexed, colour = 'blue', linetype=dash)
ggplot(melt(data.frame(time=as.numeric(time(var.pelt@data.set)), var.pelt@data.set), id.vars="time"), aes(time, value)) +
geom_line() +
geom_vline(xintercept = cpts.ts(var.pelt), colour="red", linetype = "dotdash") +
geom_vline(xintercept = groundtruth.indexed, colour = 'blue', linetype=dashed)
ggplot(melt(data.frame(time=as.numeric(time(var.pelt@data.set)), var.pelt@data.set), id.vars="time"), aes(time, value)) +
geom_line() +
geom_vline(xintercept = cpts.ts(var.pelt), colour="red", linetype = "dotdash") +
geom_vline(xintercept = groundtruth.indexed, colour = 'blue', linetype='dashed')
ggplot(melt(data.frame(time=as.numeric(time(var.Bu.Dis@data.set)), var.Bu.Dis@data.set), id.vars="time"), aes(time, value)) +
geom_line() +
geom_vline(xintercept = cpts.ts(var.Bu.Dis), colour="red", linetype = "dotdash") +
geom_vline(xintercept = groundtruth.indexed, colour="blue", linetype = "dashed")
ggplot(melt(data.frame(time=as.numeric(time(var.pelt@data.set)), var.pelt@data.set), id.vars="time"), aes(time, value)) +
geom_line() +
geom_vline(xintercept = cpts.ts(var.pelt), colour="red", linetype = "dotdash") +
geom_vline(xintercept = groundtruth.indexed, colour="blue", linetype = "dashed")
ggplot(melt(data.frame(time=as.numeric(time(var.pelt@data.set)), var.pelt@data.set), id.vars="time"), aes(time, value)) +
geom_line() +
geom_vline(xintercept = cpts.ts(var.pelt), colour="red", linetype = "dotdash")
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
RunExperiment('rabobank')
data <- ProcessData('rabobank')
data
cpt.var(rabobank$Freq, method='CROPS')
cpt.var(data$Freq, method='CROPS')
cpt.var(data$Freq, method='PELT', penalty = 'CROPS', pen.value = c(log(length(data$Freq)), 100*log(length(data$Freq))))
crops.result <- cpt.var(data$Freq, method='PELT', penalty = 'CROPS', pen.value = c(log(length(data$Freq)), 100*log(length(data$Freq))))
plot(crops.result, diagnostic = 'TRUE')
crops.result <- cpt.var(data$Freq, method='PELT', penalty = 'CROPS', pen.value = c(log(length(data$Freq)), 1000*log(length(data$Freq))))
plot(crops.result, diagnostic = 'TRUE')
crops.result <- cpt.var(data$Freq, method='PELT', penalty = 'CROPS', pen.value = c(log(length(data$Freq)), 10000*log(length(data$Freq))))
plot(crops.result, diagnostic = 'TRUE')
qqplot(crops.result)
par(1)
par(mfrow = c(1,1))
plot(crops.result, diagnostic = 'TRUE')
abline(v = 2, col = 'blue', lty = 2)
test <- cpt.var(data$Freq, method = 'PELT', penalty = 'SIC')
plot(test)
plot(crops.result, diagnostic = 'TRUE')
abline(v = 2, col = 'blue', lty = 2)
abline(h = 6.21, col = 'green', lty = 2)
abline(h = 8.16, col = 'red', lty = 2)
plot(crops.result, diagnostic = 'TRUE')
abline(v = 2, col = 'blue', lty = 2)
abline(h = 8.16, col = 'red', lty = 3)
abline(h = 6.21, col = 'red', lty = 4)
connexxion <- read_delim(
file = '~/Repos/master-thesis/Data/connexxion.csv',
","
escape_double = FALSE,
col_types = cols(Date = col_date(format = "%d-%m-%Y")),
trim_ws = TRUE
)
connexxion <- read_delim(
file = '~/Repos/master-thesis/Data/connexxion.csv',
",",
escape_double = FALSE,
col_types = cols(Date = col_date(format = "%d-%m-%Y")),
trim_ws = TRUE
)
colnames(connexxion) <- c("Date", "Freq")
dap <- read_delim(
file = '~/Repos/master-thesis/Data/dap.csv',
",",
escape_double = FALSE,
col_types = cols(Date = col_date(format = "%d-%m-%Y")),
trim_ws = TRUE
)
colnames(dap) <- c("Date", "Freq")
dirk <- read_delim(
file = '~/Repos/master-thesis/Data/dirk.csv',
",",
escape_double = FALSE,
col_types = cols(Date = col_date(format = "%d-%m-%Y")),
trim_ws = TRUE
)
colnames(dirk) <- c("Date", "Freq")
hist(connexion$Freq)
hist(connexxion$Freq)
hist(dap$Freq)
hist(dirk$Freq)
dirk
plot(cpt.mean(connexxion$Freq, method='PELT', penalty = 'SIC'))
plot(cpt.mean(connexxion$Freq, method='BinSeg', penalty = 'SIC'))
plot(cpt.mean(connexxion$Freq, method='SegNeigh', penalty = 'SIC'))
plot(cpt.var(connexxion$Freq, method='SegNeigh', penalty = 'SIC'))
plot(cpt.var(connexxion$Freq, method='BinSeg', penalty = 'SIC'))
plot(cpt.var(connexxion$Freq, method='PELT', penalty = 'SIC'))
plot(cpt.meanvar(connexxion$Freq, method='PELT', penalty = 'SIC'))
plot(cpt.var(connexxion$Freq, method='PELT', penalty = 'SIC'))
plot(cpt.var(connexxion$Freq, method='SegNeigh', penalty = 'SIC'))
plot(cpt.var(dap$Freq, method='SegNeigh', penalty = 'SIC'))
plot(cpt.var(dap$Freq, method='PELT', penalty = 'SIC'))
plot(cpt.var(dap$Freq, method='BinSeg', penalty = 'SIC'))
plot(cpt.var(dirk$Freq, method='BinSeg', penalty = 'SIC'))
plot(cpt.var(dirk$Freq, method='SegNeigh', penalty = 'SIC'))
plot(cpt.var(dirk$Freq, method='PELT', penalty = 'SIC'))
plot(cpt.meanvar(dirk$Freq, method='PELT', penalty = 'SIC'))
plot(cpt.mean(dirk$Freq, method='PELT', penalty = 'SIC'))
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
plot(cpt.mean(dirk$Freq, method='PELT', penalty = 'SIC', minseglen = 5))
plot(cpt.var(dirk$Freq, method='PELT', penalty = 'SIC', minseglen = 5))
plot(cpt.var(dirk$Freq, method='PELT', penalty = 'SIC', minseglen = 4))
plot(cpt.var(dirk$Freq, method='PELT', penalty = 'SIC', minseglen = 2))
plot(cpt.var(dirk$Freq, method='PELT', penalty = 'SIC', minseglen = 1))
plot(cpt.var(dirk$Freq, method='PELT', penalty = 'SIC', minseglen = 0))
plot(cpt.mean(dirk$Freq, method='PELT', penalty = 'SIC', minseglen = 0, test.stat = "CUSUM"))
RunExperiment('rabobank')
RunExperiment('rabobank')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/measures.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/simulated.R')
RunExperiment('dirk')
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/measures.R')
RunExperiment('dirk')
ground.true
ground.truth
RunExperiment('dirk')
groundtruth
groundtruth$X1
RunExperiment('dirk')
dataset
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/measures.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/simulated.R')
RunExperiment('dirk')
RunExperiment('rabobank')
RunExperiment('rabobank')
View(CalculateF1)
View(CalculateF1)
View(RunExperiment)
View(RunExperiment)
RunExperiment('rabobank')
RunExperiment('dirk')
class(groundtruth)
foreach(i = groundtruth) %do% which(dataset$Date == i)
RunExperiment('kvk')
View(CalculateF1)
View(CalculateF1)
RunExperiment('kvk')
RunExperiment('connexxion')
RunExperiment('ziggo')
RunExperiment('ziggo')
RunExperiment('ziggo')
ground.truth
truth
RunExperiment('rabobank')
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
RunExperiment('ziggo')
RunExperiment('ziggo')
RunExperiment('ziggo')
RunExperiment('ziggo')
foreach(i = groundtruth) %do% which(dataset$Date == i)
which(dataset$Date == as.Date('2017-02-07'))
which(dataset$Date == as.Date('2017-02-07'))
dataset$Date
which(dataset$Date == "21-01-2017")
groundtruth
which(dataset$Date == groundtruth[1])
which(dataset$Date == as.character(groundtruth[1]))
as.character(groundtruth[1])
RunExperiment('rabobank')
groundtruth
dataset$Date
RunExperiment('ziggo')
RunExperiment('ziggo')
RunExperiment('ziggo')
RunExperiment('dirk')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
RunExperiment('dirk')
dirk <- ProcessData('dirk')
dirk.truth <- GetGroundTruth('dirk')
plot(dirk, dirk.truth)
plot(dirk$Freq, dirk.truth)
plot(dirk)
PlotGroundTruth('dirk')
PlotGroundTruth(dirk.truth)
graphics.off()
ziggo <- ProcessData('ziggo')
ziggo.truth <- GetGroundTruth('ziggo')
bol <- ProcessData('bol')
bol.truth <- GetGroundTruth('bol')
connexxion <- ProcessData('connexxion')
connexxion.truth <- GetGroundTruth('connexxion')
dap <- ProcessData('dap')
dap <- GetGroundTruth('dap')
jumbo <- ProcessData('jumbo')
jumbo <- GetGroundTruth('jumbo')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
PlotTruths()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
PlotTruths()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
PlotTruths()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
PlotTruths()
RunExperiment('dirk')
RunExperiment('ziggo')
RunExperiment('bol')
RunExperiment('connexxion')
RunExperiment('dap')
RunExperiment('jumbo')
RunExperiment('kvk')
RunExperiment('rabo')
RunExperiment('rabobank')
RunExperiment('tele2')
RunExperiment('uwv')
data <- structure(list(RoleCond = structure(c(1L, 1L, 2L, 2L), .Label = c("Buyer", "Seller"), class = "factor"),
ArgCond = structure(c(1L, 2L, 1L, 2L), .Label = c("No Argument", "Argument"), class = "factor"),
mean = c(2210.71428571429, 2142.70833333333, 2282.40740740741, 2346.2962962963),
se = c(20.1231042081511, 16.7408757749718, 20.1471554637891, 15.708092540868)),
.Names = c("RoleCond", "ArgCond", "mean", "se"), row.names = c(NA, -4L), class = "data.frame")
data
RunExperiment('dirk')
RunExperiment('ziggo')
RunExperiment('bol')
RunExperiment('connexxion')
RunExperiment('dap')
RunExperiment('dap')
RunExperiment('jumbo')
RunExperiment('kvk')
RunExperiment('rabobank')
RunExperiment('tele2')
RunExperiment('uwv')
RunExperiment('dirk')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
RunExperiment('dirk')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/experiment.R')
RunExperiment('dirk')
RunExperiment('ziggo')
RunExperiment('dirk')
RunExperiment('ziggo')
RunExperiment('bol')
RunExperiment('connexxion')
RunExperiment('dap')
RunExperiment('jumbo')
RunExperiment('kvk')
RunExperiment('rabo')
RunExperiment('rabobank')
RunExperiment('tele2')
RunExperiment('uwv')
library(readr)
fullresults <- read_csv("~/Desktop/fullresults.csv")
View(fullresults)
library(reshape2)
fullmelted <- melt(fullresults, id.vars = Algorithm)
fullmelted <- melt(fullresults, id.vars = fullresults$Algorithm)
library(readr)
fullresults <- read_csv("~/Desktop/fullresults.csv")
View(fullresults)
View(fullresults)
fullresults[fullresults$Algorithm == 'MeanVar BinSeg']
fullresults[fullresults$Algorithm == 'MeanVar BinSeg',]
meanvarbinseg <- fullresults[fullresults$Algorithm == 'MeanVar BinSeg',]
meanvarsegneigh <- fullresults[fullresults$Algorithm == 'MeanVar SegNeigh',]
meanvarpelt <- fullresults[fullresults$Algorithm == 'MeanVar PELT',]
varbinseg <- fullresults[fullresults$Algorithm == 'Var BinSeg',]
varsegneigh <- fullresults[fullresults$Algorithm == 'Var SegNeigh',]
varpelt <- fullresults[fullresults$Algorithm == 'Var PELT',]
meanbinseg <- fullresults[fullresults$Algorithm == 'Mean BinSeg',]
meansegneigh <- fullresults[fullresults$Algorithm == 'Mean SegNeigh',]
meanpelt <- fullresults[fullresults$Algorithm == 'Mean PELT',]
meanpelt
summary(meanpelt)
library(pastecs)
install.packages("pastecs")
library(pastecs)
stat.desc(meanpelt)
test <- stat.desc(meanpelt)
Gene<-c("Gene1","Gene2","Gene1","Gene2")
count1<-c(12,14,16,34)
count2<-c(4,7,9,23)
count3<-c(36,22,54,12)
count4<-c(12,24,35,23)
Species<-c("A","A","B","B")
df<-data.frame(Gene,count1,count2,count3,count4,Species)
df
mean1<-mean(as.numeric(df[1,][c(2,3,4,5)]))
mean2<-mean(as.numeric(df[2,][c(2,3,4,5)]))
mean3<-mean(as.numeric(df[3,][c(2,3,4,5)]))
mean4<-mean(as.numeric(df[4,][c(2,3,4,5)]))
Gene1SpeciesA.stdev<-sd(as.numeric(df[1,][c(2,3,4,5)]))
Gene2SpeciesA.stdev<-sd(as.numeric(df[2,][c(2,3,4,5)]))
Gene1SpeciesB.stdev<-sd(as.numeric(df[3,][c(2,3,4,5)]))
Gene2SpeciesB.stdev<-sd(as.numeric(df[4,][c(2,3,4,5)]))
Gene
df
cols = c(2,3,4,5)
df1  = transform(df, mean=rowMeans(df[cols]), sd=apply(df[cols],1, sd))
ggplot(df1, aes(x=as.factor(Gene), y=mean, fill=Species)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9))
data = 'test'
data
View(test)
View(meanbinseg)
t(meanbinseg)
t(meanbinseg)['F1']
t(meanbinseg)['Rand']
t(meanbinseg)[['Rand']
t(meanbinseg)[['Rand']]
t(meanbinseg)[['Rand']]
class(t(meanbinseg))
write.csv(fullresults, 'fullresultstable.csv')
View(df)
library(readr)
df <- read_csv("~/Desktop/ggplotcsv.csv")
View(df)
cols = c(3,4,5,6,7,8,9,10,11,12)
df1 = transform(df, mean=rowMeans(df[cols]), sd=apply(df[cols],1, sd))
df1
ggplot(df1, aes(x = as.factor(Metric), y = mean, fill=Algorithm)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9))
ggplot(df1, aes(x = as.factor(Algorithm), y = mean, fill=Metric)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9))
write.csv(df1, 'resultsforplot.csv')
ggplot(df1, aes(x = as.factor(Algorithm), y = mean, fill=Metric)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(df1, aes(x = as.factor(Algorithm), y = mean, fill=Metric)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df1, aes(x = as.factor(Algorithm), y = mean, fill=Metric)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title=Mean Metric Scores, x='Algorithm', y='Metric Score')
ggplot(df1, aes(x = as.factor(Algorithm), y = mean, fill=Metric)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title='Mean Metric Scores', x='Algorithm', y='Metric Score')
ggplot(df1, aes(x = as.factor(Algorithm), y = mean, fill=Metric)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5)) +
labs(title='Mean Metric Scores', x='Algorithm', y='Metric Score')
ggplot(df1, aes(x = as.factor(Algorithm), y = mean, fill=Metric)) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5)) +
labs(title='Mean Metric Scores', x='Algorithm', y='Metric Score') +
scale_color_manual(labels = c("Adjusted Rand", "BCubed F-Score", "BCubed Precision", "BCubed Recall", "F1", "Precision", "Rand Index", "Recall"))
View(meanbinseg)
View(df1)
df1
vars <- c('Metric', 'Algorithm', 'mean')
df2 <- df1[vars]
df2
meanbinseg.rank <- df2[df2$Algorithm == 'Mean BinSeg']
meanbinseg.rank
meanbinseg.rank <- df2[df2$Algorithm == 'Mean BinSeg',]
meanbinseg.rank
df2[df2$Algorithm == 'Mean BinSeg',]
df2[df2$Algorithm == 'Mean BinSeg']
df2[,df2$Algorithm == 'Mean BinSeg']
df2[df2$Algorithm == 'Mean BinSeg']
df2[df2$Algorithm == 'Mean BinSeg',]
df2[df2$Algorithm == 'Mean Binseg',]
df2[df2$Metric == 'Precision',]
precision.means <- df2[df2$Metric == 'Precision',]
recall.means <- df2[df2$Metric == 'Recall',]
f1.means <- df2[df2$Metric == 'F1',]
rand.means <- df2[df2$Metric == 'Rand',]
adjrand.means <- df2[df2$Metric == 'AdjRand',]
bcubedprecision.means <- df2[df2$Metric == 'Bcubed Precision',]
bcubedrecall.means <- df2[df2$Metric == 'Bcubed Recall',]
bcubedfscore.means <- df2[df2$Metric == 'Bcubed F-Score',]
bcubedfscore.means
bcubedfscore.means <- bcubedfscore.means[order(mean),]
bcubedfscore.means.sorted <- bcubedfscore.means[order(mean),]
bcubedfscore.means.sorted <- bcubedfscore.means[order(bcubedfscore.means$mean),]
bcubedfscore.means.sorted
bcubedfscore.means.sorted <- bcubedfscore.means[order(-bcubedfscore.means$mean),]
bcubedfscore.means.sorted
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
precision.means
precision.means.sorted <- precision.means[order(-precision.means$mean)]
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
df2$Algorithm
bcubedfscore.means$Algorithm
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
precision.means
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
dat
bcubedfscore.means.sorted
adjrand.means.sorted
precision.means.sorted$algo.num <- dat$algo.numbers[match(precision.means.sorted$Algorithm, dat$algo.numbers)]
precision.means.sorted
precision.means.sorted$algo.num <- dat$algo.numbers[match(precision.means.sorted$Algorithm, dat$algo.names)]
precision.means.sorted
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
library("kendall")
install.packages("Kendall")
source('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
m
debugSource('~/Repos/master-thesis/Experiments/R/ChangeDetection/utilities.R')
CalculateRankings()
test
write.csv(test, "testrankstuff.csv")
library(Kendall)
summary(Kendall(m))
cor.test(m, method="kendall")
test
library(rpud)
install.packages("~/Downloads/rpux_0.6.1_mac.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/rpux_0.6.1_mac/rpud_0.6.1.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/rpux_0.6.1_mac/rpudplus_0.6.1.tgz", repos = NULL, type = .Platform$pkgType)
library(rpud)
install.packages("vegan")
library(vegan)
kendall.global(m)
cor.test(m,method='Kendall')
cor.test(m,method='kendall')
m[1,1]
m[1]
m[,1]
m[1,]
library(rpud)
library(rpud)
library(rpudplus)
library(rpud)
